setwd("~/GitHub/nmhss")
library(readr)
nmhss_puf_2020_csv <- read_csv("C:/Users/Ethan May/Downloads/N-MHSS-2020-DS0001-bndl-data-csv_v1 (1)/nmhss-puf-2020-csv.csv")
View(nmhss_puf_2020_csv)
library(readr)
nmhss_puf_2019_csv <- read_csv("data-raw/nmhss-puf-2019-csv.csv")
View(nmhss_puf_2019_csv)
library(readr)
nmhss_puf_2018_csv <- read_csv("data-raw/nmhss-puf-2018-csv.csv")
View(nmhss_puf_2018_csv)
library(readr)
NMHSS_2017_PUF_CSV <- read_csv("data-raw/NMHSS_2017_PUF_CSV.csv")
View(NMHSS_2017_PUF_CSV)
library(readr)
nmhss_puf_2016 <- read_csv("data-raw/nmhss_puf_2016.csv")
View(nmhss_puf_2016)
library(readr)
N_MHSS_2015_DS0001_data_excel <- read_csv("data-raw/N-MHSS-2015-DS0001-data-excel.csv")
View(N_MHSS_2015_DS0001_data_excel)
library(readr)
N_MHSS_2014_DS0001_data_excel <- read_csv("data-raw/N-MHSS-2014-DS0001-data-excel.csv")
View(N_MHSS_2014_DS0001_data_excel)
library(readr)
N_MHSS_2012_DS0001_data_excel <- read_csv("data-raw/N-MHSS-2012-DS0001-data-excel.csv")
View(N_MHSS_2012_DS0001_data_excel)
library(readr)
N_MHSS_2010_DS0001_data_excel <- read_delim("data-raw/N-MHSS-2010-DS0001-data-excel.tsv",
delim = "\t", escape_double = FALSE,
trim_ws = TRUE)
View(N_MHSS_2010_DS0001_data_excel)
library(readr)
library(dplyr)
nmhss_2010 <- read_delim("data-raw/N-MHSS-2010-DS0001-data-excel.tsv",
delim = "\t", escape_double = FALSE,
trim_ws = TRUE)
library(readr)
library(dplyr)
nmhss_2010 <- read_delim("data-raw/N-MHSS-2010-DS0001-data-excel.tsv",
delim = "\t", escape_double = FALSE,
trim_ws = TRUE)
nmhss_2012 <- read_csv("data-raw/N-MHSS-2012-DS0001-data-excel.csv")
nmhss_2012 <- read.csv("data-raw/N-MHSS-2012-DS0001-data-excel.csv")
nhmss_2014  <- read.csv("data-raw/N-MHSS-2014-DS0001-data-excel.csv")
nhmss_2015 <- read.csv("data-raw/N-MHSS-2015-DS0001-data-excel.csv")
nhmss_2016 <- read.csv("data-raw/N-MHSS-2016-DS0001-data-excel.csv")
nhmss_2016 <- read.csv("data-raw/nmhss_puf_2016.csv")
nhmss_2016 <- read.csv("data-raw/nmhss_puf_2016.csv")
nhmss_2017 <- read.csv("data-raw/NMHSS_2017_PUF_CSV.csv")
nhmss_2018 <- read.csv("data-raw/nmhss-puf-2018.csv")
nhmss_2018 <- read.csv("data-raw/nmhss-puf-2018-csv.csv")
nhmss_2019 <- read.csv("data-raw/nmhss-puf-2019-csv.csv")
nhmss_2020 <- read.csv("data-raw/nmhss-puf-2020-csv.csv")
source("~/GitHub/nmhss/data-raw/cleanDatanmhss.R")
usethis::use_data(nhmss_2012)
nmhss_2012 <- read.csv("data-raw/N-MHSS-2012-DS0001-data-excel.csv")
usethis::use_data(nhmss_2010)
View(nmhss_2010)
nmhss_2010 <- read_delim("data-raw/N-MHSS-2010-DS0001-data-excel.tsv",
delim = "\t", escape_double = FALSE,
trim_ws = TRUE)
nmhss_2012 <- read.csv("data-raw/N-MHSS-2012-DS0001-data-excel.csv")
source("~/GitHub/nmhss/data-raw/cleanDatanmhss.R")
source("~/GitHub/nmhss/data-raw/cleanDatanmhss.R")
source("~/GitHub/nmhss/data-raw/cleanDatanmhss.R")
?nmhss_2010
load("~/GitHub/nmhss/data/nmhss_2010.rda")
nmhss_2010 <- read_delim("data-raw/N-MHSS-2010-DS0001-data-excel.tsv",
delim = "\t", escape_double = FALSE,
trim_ws = TRUE)
nmhss_2012 <- read.csv("data-raw/N-MHSS-2012-DS0001-data-excel.csv")
nmhss_2012 <- nmhss_2012 %>% mutate(year = 2012)
nmhss_2012 <- nmhss_2012 %>% mutate(year = 2012)
nmhss_2016 <- read.csv("data-raw/nmhss_puf_2016.csv")
nmhss_2016 <- nmhss_2016 %>% mutate(year = 2016)
nmhss_2017 <- read.csv("data-raw/NMHSS_2017_PUF_CSV.csv")
nmhss_2017 <- nmhss_2017 %>% mutate(year = 2017)
source("~/GitHub/nmhss/data-raw/cleanDatanmhss.R")
View(nmhss_2020)
source("~/GitHub/nmhss/data-raw/cleanDatanmhss.R")
source("~/GitHub/nmhss/data-raw/cleanDatanmhss.R")
View(nmhss_2012)
full_joined_df <- full_join(nmhss_2010, nmhss_2012, by = "CASEID")
list_of_data <- list(nmhss_2010,nmhss_2012,nmhss_2014,nmhss_2015,nmhss_2016,nmhss_2017,nmhss_2018,nmhss_2019,nmhss_2020)
source("~/GitHub/nmhss/data-raw/cleanDatanmhss.R")
source("~/GitHub/nmhss/data-raw/cleanDatanmhss.R")
source("~/GitHub/nmhss/data-raw/cleanDatanmhss.R")
nmhss_2020 <- read.csv("data-raw/nmhss-puf-2020-csv.csv")
nmhss_2020 <- nmhss_2020 %>% mutate(YEAR = 2020)
full_joined_df <- full_join(nmhss_2010, nmhss_2012, by = "CASEID")
full_joined_df <- full_join(full_joined_df, nmhss_2014, by = "CASEID")
View(full_joined_df)
nmhss_2010 <- read_delim("data-raw/N-MHSS-2010-DS0001-data-excel.tsv",
delim = "\t", escape_double = FALSE,
trim_ws = TRUE)
nmhss_2010 <- nmhss_2010 %>% mutate(YEAR = 2010) %>% rename(MHIntake = MHINTAKE)
gc()
library(readr)
source("~/GitHub/nmhss/data-raw/cleanDatanmhss.R")
pdf("~/GitHub/nmhss/graphs/all_states_data.pdf", width = 11, height = 8.5)
tele2122_clean <- data_start_2014_through_2022 %>%
filter(!TREATTELEMEDINCE %in% c("L","M"))
for (state_name in unique_states) {
byState1 <- data_start_2014_through_2022 %>%
filter(LST == state_name)
# Generate and print the plot for the current state
p <- ggplot(data = byState1, aes(x = YEAR, fill = TREATTELEMEDINCE)) +
geom_bar() +
labs(title = paste("Data for State:", state_name), x = "Year", y = "Count") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
print(p) # Explicitly print the plot
}
dev.off()
unique_states <- data_start_2014_through_2022 %>%
distinct(LST) %>%
arrange(LST) %>%
pull(LST)
pdf("~/GitHub/nmhss/graphs/all_states_data.pdf", width = 11, height = 8.5)
tele2122_clean <- data_start_2014_through_2022 %>%
filter(!TREATTELEMEDINCE %in% c("L","M"))
for (state_name in unique_states) {
byState1 <- data_start_2014_through_2022 %>%
filter(LST == state_name)
# Generate and print the plot for the current state
p <- ggplot(data = byState1, aes(x = YEAR, fill = TREATTELEMEDINCE)) +
geom_bar() +
labs(title = paste("Data for State:", state_name), x = "Year", y = "Count") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
print(p) # Explicitly print the plot
}
dev.off()
library(ggplot2)
library(dplyr)
library(tidyr)
library(tidyverse)
data("data_all_years")
data("data_start_2014")
data("data_start_2014_even")
data("data_start_2014_through_2022")
unique_states <- data_start_2014_through_2022 %>%
distinct(LST) %>%
arrange(LST) %>%
pull(LST)
pdf("~/GitHub/nmhss/graphs/all_states_data.pdf", width = 11, height = 8.5)
tele2122_clean <- data_start_2014_through_2022 %>%
filter(!TREATTELEMEDINCE %in% c("L","M"))
for (state_name in unique_states) {
byState1 <- data_start_2014_through_2022 %>%
filter(LST == state_name)
# Generate and print the plot for the current state
p <- ggplot(data = byState1, aes(x = YEAR, fill = TREATTELEMEDINCE)) +
geom_bar() +
labs(title = paste("Data for State:", state_name), x = "Year", y = "Count") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
print(p) # Explicitly print the plot
}
dev.off()
pdf("~/GitHub/nmhss/graphs/all_states_data.pdf", width = 11, height = 8.5)
tele2122_clean <- data_start_2014_through_2022 %>%
filter(!TREATTELEMEDINCE %in% c("L","M"))
for (state_name in unique_states) {
byState1 <- tele2122_clean %>%
filter(LST == state_name)
# Generate and print the plot for the current state
p <- ggplot(data = byState1, aes(x = YEAR, fill = TREATTELEMEDINCE)) +
geom_bar() +
labs(title = paste("Data for State:", state_name), x = "Year", y = "Count") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
print(p) # Explicitly print the plot
}
dev.off()
pdf("~/GitHub/nmhss/graphs/all_states_data.pdf", width = 11, height = 8.5)
tele2122_clean <- data_start_2014_through_2022 %>%
filter(!TREATTELEMEDINCE %in% c("L","M",-1))
for (state_name in unique_states)
{
byState1 <- tele2122_clean %>%
filter(LST == state_name)
# Generate and print the plot for the current state
p <- ggplot(data = byState1, aes(x = YEAR, fill = TREATTELEMEDINCE)) +
geom_bar() +
labs(title = paste("Data for State:", state_name), x = "Year", y = "Count") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
print(p) # Explicitly print the plot
}
pdf("~/GitHub/nmhss/graphs/all_states_data.pdf", width = 11, height = 8.5)
tele2122_clean <- data_start_2014_through_2022 %>%
filter(!TREATTELEMEDINCE %in% c("L","M","-1"))
for (state_name in unique_states)
{
byState1 <- tele2122_clean %>%
filter(LST == state_name)
# Generate and print the plot for the current state
p <- ggplot(data = byState1, aes(x = YEAR, fill = TREATTELEMEDINCE)) +
geom_bar() +
labs(title = paste("Data for State:", state_name), x = "Year", y = "Count") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
print(p) # Explicitly print the plot
}
dev.off()
pdf("~/GitHub/nmhss/graphs/all_states_data.pdf", width = 11, height = 8.5)
tele2122_clean <- data_start_2014_through_2022 %>%
filter(!TREATTELEMEDINCE %in% c("L","M","-1","-5"))
for (state_name in unique_states)
{
byState1 <- tele2122_clean %>%
filter(LST == state_name)
# Generate and print the plot for the current state
p <- ggplot(data = byState1, aes(x = YEAR, fill = TREATTELEMEDINCE)) +
geom_bar() +
labs(title = paste("Data for State:", state_name), x = "Year", y = "Count") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
print(p) # Explicitly print the plot
}
dev.off()
View(nsumh_2021)
#################all years each var##########################
#vars_not_in_small <- setdiff(names(data_start_2014), names(data_all_years))
for (var in names(data_start_2014_through_2022))
{
browser()
p<- ggplot(data_start_2014_through_2022, aes(x = YEAR, fill = !!rlang::sym(var))) +
geom_bar(position = "fill") + # Use position = "fill" to show proportions
scale_y_continuous(labels = scales::percent_format()) + # Convert y-axis to percentage
labs(y = "Percentage", x = "Year", title = "Category Distribution by Year") +
theme_minimal()
print(p)
}
#################all years each var##########################
#vars_not_in_small <- setdiff(names(data_start_2014), names(data_all_years))
for (var in names(data_start_2014_through_2022))
{
#  browser()
p<- ggplot(data_start_2014_through_2022, aes(x = YEAR, fill = !!rlang::sym(var))) +
geom_bar(position = "fill") + # Use position = "fill" to show proportions
scale_y_continuous(labels = scales::percent_format()) + # Convert y-axis to percentage
labs(y = "Percentage", x = "Year", title = "Category Distribution by Year") +
theme_minimal()
print(p)
}
#################all years each var##########################
#vars_not_in_small <- setdiff(names(data_start_2014), names(data_all_years))
for (var in colname(data_start_2014_through_2022))
{
#  browser()
p<- ggplot(data_start_2014_through_2022, aes(x = YEAR, fill = !!rlang::sym(var))) +
geom_bar(position = "fill") + # Use position = "fill" to show proportions
scale_y_continuous(labels = scales::percent_format()) + # Convert y-axis to percentage
labs(y = "Percentage", x = "Year", title = "Category Distribution by Year") +
theme_minimal()
print(p)
}
for (var in colnames(data_start_2014_through_2022))
{
#  browser()
p<- ggplot(data_start_2014_through_2022, aes(x = YEAR, fill = !!rlang::sym(var))) +
geom_bar(position = "fill") + # Use position = "fill" to show proportions
scale_y_continuous(labels = scales::percent_format()) + # Convert y-axis to percentage
labs(y = "Percentage", x = "Year", title = "Category Distribution by Year") +
theme_minimal()
print(p)
}
for (var in colnames(data_start_2014_through_2022))
{
browser()
p<- ggplot(data_start_2014_through_2022, aes(x = YEAR, fill = !!rlang::sym(var))) +
geom_bar(position = "fill") + # Use position = "fill" to show proportions
scale_y_continuous(labels = scales::percent_format()) + # Convert y-axis to percentage
labs(y = "Percentage", x = "Year", title = "Category Distribution by Year") +
theme_minimal()
print(p)
}
for (var in colnames(data_start_2014_through_2022)) {
# Skip plotting for 'YEAR' itself as a fill variable
if (var != "YEAR") {
# Use !!sym(var) inside aes() for dynamic variable names
p <- ggplot(data_start_2014_through_2022, aes(x = YEAR, fill = !!sym(var))) +
geom_bar(position = "fill", stat = "count") + # stat="count" explicitly counts occurrences for bar plots
scale_y_continuous(labels = scales::percent_format()) + # Convert y-axis to percentage
labs(y = "Percentage", x = "Year", title = paste("Category Distribution by Year:", var)) +
theme_minimal()
print(p)
}
}
# Use !!sym(var) inside aes() for dynamic variable names
p <- ggplot(data_start_2014_through_2022, aes(x = YEAR, fill = !!sym(var))) +
geom_bar(position = "fill", stat = "count") + # stat="count" explicitly counts occurrences for bar plots
scale_y_continuous(labels = scales::percent_format()) + # Convert y-axis to percentage
labs(y = "Percentage", x = "Year", title = paste("Category Distribution by Year:", var)) +
theme_minimal()
print(p)
vars_not_in_small <- setdiff(names(data_start_2014), names(data_all_years))
for (var in vars_not_in_small)
{
browser()
p<- ggplot(data_start_2014, aes(x = YEAR, fill = !!rlang::sym(var))) +
geom_bar(position = "fill") + # Use position = "fill" to show proportions
scale_y_continuous(labels = scales::percent_format()) + # Convert y-axis to percentage
labs(y = "Percentage", x = "Year", title = "Category Distribution by Year") +
theme_minimal()
print(p)
}
data("data_all_years")
data("data_start_2014")
data("data_start_2014_even")
data("data_start_2014_through_2022")
vars_not_in_small <- setdiff(names(data_start_2014), names(data_all_years))
for (var in vars_not_in_small)
{
browser()
p<- ggplot(data_start_2014, aes(x = YEAR, fill = !!rlang::sym(var))) +
geom_bar(position = "fill") + # Use position = "fill" to show proportions
scale_y_continuous(labels = scales::percent_format()) + # Convert y-axis to percentage
labs(y = "Percentage", x = "Year", title = "Category Distribution by Year") +
theme_minimal()
print(p)
}
C
library(ggplot2)
library(dplyr)
library(tidyr)
library(tidyverse)
data("data_all_years")
data("data_start_2014")
data("data_start_2014_even")
data("data_start_2014_through_2022")
vars_not_in_small <- setdiff(names(data_start_2014), names(data_all_years))
for (var in vars_not_in_small)
{
browser()
p<- ggplot(data_start_2014, aes(x = YEAR, fill = !!rlang::sym(var))) +
geom_bar(position = "fill") + # Use position = "fill" to show proportions
scale_y_continuous(labels = scales::percent_format()) + # Convert y-axis to percentage
labs(y = "Percentage", x = "Year", title = "Category Distribution by Year") +
theme_minimal()
print(p)
}
vars_not_in_small <- setdiff(names(data_start_2014), names(data_all_years))
for (var in vars_not_in_small)
{
browser()
p<- ggplot(data_start_2014, aes(x = YEAR, fill = !!rlang::sym(var))) +
geom_bar(position = "fill") + # Use position = "fill" to show proportions
scale_y_continuous(labels = scales::percent_format()) + # Convert y-axis to percentage
labs(y = "Percentage", x = "Year", title = "Category Distribution by Year") +
theme_minimal()
print(p)
}
vars_not_in_small <- setdiff(names(data_start_2014), names(data_all_years))
data("data_start_2014")
data("data_start_2014_even")
data("data_start_2014_through_2022")
vars_not_in_small <- setdiff(names(data_start_2014), names(data_all_years))
for (var in vars_not_in_small)
{
browser()
p<- ggplot(data_start_2014, aes(x = YEAR, fill = !!rlang::sym(var))) +
geom_bar(position = "fill") + # Use position = "fill" to show proportions
scale_y_continuous(labels = scales::percent_format()) + # Convert y-axis to percentage
labs(y = "Percentage", x = "Year", title = "Category Distribution by Year") +
theme_minimal()
print(p)
}
data("data_start_2014")
vars_not_in_small <- setdiff(names(data_start_2014), names(data_all_years))
data("data_all_years")
vars_not_in_small <- setdiff(names(data_start_2014), names(data_all_years))
for (var in vars_not_in_small)
{
browser()
p<- ggplot(data_start_2014, aes(x = YEAR, fill = !!rlang::sym(var))) +
geom_bar(position = "fill") + # Use position = "fill" to show proportions
scale_y_continuous(labels = scales::percent_format()) + # Convert y-axis to percentage
labs(y = "Percentage", x = "Year", title = "Category Distribution by Year") +
theme_minimal()
print(p)
}
library(ggplot2)
library(dplyr)
library(tidyr)
library(tidyverse)
data("data_all_years")
data("data_start_2014")
data("data_start_2014_even")
data("data_start_2014_through_2022")
vars_not_in_small <- setdiff(names(data_start_2014), names(data_all_years))
for (var in vars_not_in_small)
{
browser()
p<- ggplot(data_start_2014, aes(x = YEAR, fill = !!rlang::sym(var))) +
geom_bar(position = "fill") + # Use position = "fill" to show proportions
scale_y_continuous(labels = scales::percent_format()) + # Convert y-axis to percentage
labs(y = "Percentage", x = "Year", title = "Category Distribution by Year") +
theme_minimal()
print(p)
}
library(ggplot2)
library(dplyr)
library(tidyr)
library(tidyverse)
data("data_all_years")
data("data_start_2014")
data("data_start_2014_even")
data("data_start_2014_through_2022")
unique_states <- data_start_2014_through_2022 %>%
distinct(LST) %>%
arrange(LST) %>%
pull(LST)
pdf("~/GitHub/nmhss/graphs/all_states_data.pdf", width = 11, height = 8.5)
tele2122_clean <- data_start_2014_through_2022 %>%
filter(!TREATTELEMEDINCE %in% c("L","M","-1","-5"))
for (state_name in unique_states)
{
byState <- tele2122_clean %>%
filter(LST == state_name)
# Generate and print the plot for the current state
p <- ggplot(data = byState, aes(x = YEAR, fill = TREATTELEMEDINCE)) +
geom_bar() +
labs(title = paste("Data for State:", state_name), x = "Year", y = "Count") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
print(p) # Explicitly print the plot
}
dev.off()
source("~/GitHub/nmhss/data-raw/cleanDatanmhss.R")
