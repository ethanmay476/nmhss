"0","# Assuming your setup and function definitions are already in place"
"0",""
"0","# Initialize an empty list to store results"
"0","analysis_results <- list()"
"0",""
"0","years <- unique(data_start_2014_filter$YEAR)"
"0","for (year in years) {"
"0","  data_year <- filter(data_start_2014_filter, YEAR == year) %>%"
"0","               select(which(sapply(., is_binary_factor))) %>%"
"0","               mutate_if(is.numeric, as.factor)"
"0","  "
"0","  target_var <- ""SRVC62"""
"0","  other_vars <- setdiff(names(data_year), target_var)"
"0","  "
"0","  for (var in other_vars) {"
"0","    if (var != ""YEAR"") {"
"0","      result <- perform_two_prop_z_test(data_year, target_var, var)"
"0","      analysis_results[[year]][[var]] <- min(result$p.value, na.rm = TRUE)  # Storing the minimum p-value"
"0","    }"
"0","  }"
"0","}"
"0",""
"0","# Transform analysis_results into a dataframe for the summary table"
"0","p_values_df <- tibble(Variable = unique(unlist(lapply(analysis_results, names))))"
"0","for (year in years) {"
"0","  year_p_values <- sapply(p_values_df$Variable, function(var) analysis_results[[as.character(year)]][[var]] %>% as.numeric())"
"0","  p_values_df[[as.character(year)]] <- year_p_values"
"0","}"
"0","p_values_df[is.na(p_values_df)] <- ""-""  # Replace NA with ""-"""
"0",""
"0",""
"0","# Assuming p_values_df is already created and contains p-values for various tests"
"0",""
"0","# Function to apply LaTeX coloring based on p-value significance"
"0","apply_coloring <- function(p_value) {"
"0","  if (!is.na(p_value) && p_value < 0.05) {"
"0","    # Applying green color for significant p-values"
"0","    return(sprintf(""\\cellcolor{green}{%.3f}"", p_value))"
"0","  } else {"
"0","    # Formatting non-significant p-values without coloring"
"0","    return(sprintf(""%.3f"", p_value))"
"0","  }"
"0","}"
"0",""
"0","# Apply this function to each p-value in your dataframe"
"0","for (col in names(p_values_df)[-1]) { # Assuming the first column is not p-values but variable names or similar"
"0","  p_values_df[col] <- sapply(p_values_df[[col]], function(x) ifelse(x == ""-"", x, apply_coloring(as.numeric(x))))"
"0","}"
"0",""
